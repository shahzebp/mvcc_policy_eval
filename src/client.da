import logging
import logging.handlers
import logging.config
import hashlib
import random
import collections
import time
from time import sleep

from common import Request, Response

class Client(process):

	def static_analysis():
		self.defReadAttrMap["read"]["bank"] = ["name"]
		self.defReadAttrMap["read"]["person"] = ["position", "history"]
		self.defReadAttrMap["view"]["movie"] = ["viewcount"]
		self.defReadAttrMap["view"]["person"] = ["position"]

		self.mightReadAttrMap["read"]["bank"] = ["account"]

		self.mightWriteObject["view"]["movie"] = True
		self.mightWriteObject["view"]["person"] = False
		self.mightWriteObject["read"]["person"] = True
		self.mightWriteObject["read"]["bank"] = False

	def setup(coordinators, my_index, config):
		self.defReadAttrMap = collections.defaultdict(dict)
		self.mightReadAttrMap = collections.defaultdict(dict)
		self.mightWriteObject = collections.defaultdict(dict)
		self.policy_file = config.get("setup", "policy_def_file")
		static_analysis()

		self.logger = logging.getLogger('sLogger')

		current_section = "client" + str(my_index)
		
		request_list = []

		if (config.options(current_section)):
			sequence = config.get(current_section, "sequence")
			if(sequence == "random"):
				number_requests_to_generate = int(config.get(current_section, "number_requests_to_generate"))
				request_list = config.get(current_section, "request_list")
				request_list = request_list.split(",")
				seed_value = int(config.get(current_section, "seed_value"))
				random.seed(seed_value)
				random_requests = []
				for x in range(0,number_requests_to_generate):
					index = random.randrange(0,len(request_list)-1)
					random_requests.append(request_list[index])

				request_list = random_requests
			else:
				request_list = sequence.split(",")
		else:
			sequence = None
			request_list = []

		self.total_requests = []

		self.num_requests = len(request_list)
		self.current_request_index = 0

		self.send_sequence = 1
		self.recv_sequence = 1

		for i in request_list:
			object1_id = int(config.get(i, "object1_id"))
			object2_id = int(config.get(i, "object2_id"))
			object1_type = config.get(i, "object1_type")
			object2_type = config.get(i, "object2_type")
			action = str(config.get(i, "action"))
			
			art_delay = 0
			object2_delay = 0

			try:
				art_delay = float(config.get(i, "art_delay"))
				object2_delay = float(config.get(i, "object2_delay"))
			except:
				pass
			
			uuid = hashlib.md5()
			uuid.update(str(object1_id).encode())
			uuid.update(str(object2_id).encode())
			uuid.update(str(action).encode())
			uuid.update(str(time.time()).encode())
			uuid.update(str(my_index).encode())

			request = Request(object1_id, object2_id, action, object1_type, object2_type)
			request.art_delay = art_delay
			request.object2_delay = object2_delay

			request.uuid = uuid.hexdigest()

			total_requests.append(request)

	def sendtask():

		request = total_requests[current_request_index]
		try:
			request.defReadAttr[0] = (self.defReadAttrMap[request.action][request.object_type[0]])
		except KeyError:
			request.defReadAttr[0] = ([])
		try:
			request.defReadAttr[1] = (self.defReadAttrMap[request.action][request.object_type[1]])
		except KeyError:
			request.defReadAttr[1] = ([])

		try:
			request.mightReadAttr[0] = (self.mightReadAttrMap[request.action][request.object_type[0]])
		except KeyError:
			request.mightReadAttr[0] = ([])
		
		try:
			request.mightReadAttr[1] = (self.mightReadAttrMap[request.action][request.object_type[1]])
		except KeyError:
			request.mightReadAttr[1] = ([])

		request.client = self
		recv_sequence = recv_sequence + 1
		
		if(self.mightWriteObject[request.action][request.object_type[0]] == True and
			self.mightWriteObject[request.action][request.object_type[1]] == False):
			request.swapped = 1
		
		coordinator_id = 0

		if (request.swapped == 0):
			logger.info("[Client] Request sent (UUID: {0}) to object1 Coord"
				.format(request.uuid))
			logger.debug("[Client] Request sent (seq. {0}) to object1 Coord {1}"
				.format(send_sequence, request))
			coordinator_id = request.object[0] % len(coordinators)
		else:
			logger.info("[Client] Request sent (UUID: {0}) to object2 Coord"
				.format(request.uuid))
			logger.debug("[Client] Request sent (seq. {0}) to object2 Coord {1}"
				.format(send_sequence, request))
			coordinator_id = request.object[1] % len(coordinators)

		send(('FROM_CLIENT', request),to=(coordinators[coordinator_id]))

	def run():

		#sleep(my_index / 100.0)

		sendtask()
		
		await(num_requests == current_request_index)

	def receive(msg=('OUTCOME', response), from_ = p):
		
		logger.info("[Client] Final Response received (UUID: {0}) from object1 Coord With Result: {1}"
			.format(response.request.uuid, response.result))
		logger.debug("[Client] Response received (seq. {0}) from object1 Coord {1}"
			.format(recv_sequence, response))

		recv_sequence = recv_sequence + 1
		
		current_request_index  = current_request_index + 1

		if (num_requests > current_request_index):
			sendtask()