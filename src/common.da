class Version(object):
    def __init__(self, attr, val, wts):
        self.attr = attr
        self.val = val
        self.rts = 0
        self.wts = wts
        self.pendingMightRead = []
    
    def __str__(self):
        return ("\nattr: {0} \
                \nval: {1} \
                \nrts: {2} \
                \nwts: {3} \
                \npendingMightRead: {4} \
                \n"
                .format(
                    self.attr,
                    self.val,
                    self.rts,
                    self.wts,
                    self.pendingMightRead
                    ))


class Request(object):
    def __init__(self, object1_id, object2_id, action, object1_type, object2_type):
        self.uuid               = None

        self.object             = [object1_id, object2_id]
        self.action             = action
        self.object_type        = [object1_type, object2_type]
        self.cached_updates     = [{}, {}]
        self.mightWriteObj      = []
        self.defReadAttr        = [[], []]
        self.mightReadAttr      = [[], []]
        self.client             = None
        self.timestamp          = None
        self.art_delay          = 0
        self.object2_delay      = 0
        self.read_only          = False

        self.swapped            = 0

    def __str__(self):
        return ("\nObjects: {0} \
                \nAction: {1} \
                \nObject_type: {2} \
                \nClient: {3} \
                \nTimeStamp: {4} \
                \ndefReadAttr: {5} \
                \nmightReadAttr: {6} \
                \ncached_updates: {7} \
                \nUUID: {8}     \
                \n"
                .format(
                    self.object,
                    self.action,
                    self.object_type,
                    self.client,
                    self.timestamp,
                    self.defReadAttr,
                    self.mightReadAttr,
                    self.cached_updates,
                    self.uuid))

class Response(object):
    def __init__(self, request, result):
        self.request            = request
        self.result             = result
        self.updated_object     = -1
        self.read_only_object   = -1

        self.readAttr           = [[], []]
        self.updates            = {}

    def __str__(self):
        return (self.request.__str__() + \
                "result: {0} \
                \nupdated_object: {1} \
                \nread_only_object: {2} \
                \nreadAttr: {3} \
                \nupdates: {4} \
                \n"
                .format(
                    self.result,
                    self.updated_object,
                    self.read_only_object,
                    self.readAttr,
                    self.updates))

class DataBaseResponse(object):
    def __init__(self, request):
        self.request                = request
        self.database_attributes    = [{}, {}]
        self.result = False

    def __str__(self):
        return (self.request.__str__() + \
                "Object 1 DB Attributes: {0} \
                 \nObject 2 DB Attributes: {1} \
                 \nResult {2} \
                 \n"
                .format(
                    self.database_attributes[0],
                    self.database_attributes[1],
                    self.result))

class Rule(object):
    def __init__(self, object1_condition, object2_condition, action, object1_update, object2_update):
        self.object1_condition = object1_condition
        self.object2_condition = object2_condition
        self.action = action
        self.object1_update = object1_update
        self.object2_update = object2_update

    def __str__(self):
        return ("\nobject1 Condition: {0} \
                 \nobject2 Condition: {1} \
                 \nAction: {2} \
                 \nobject1 Update: {3} \
                 \nobject2 Update: {4} \
                 \n"
                .format(
                    self.object1_condition,
                    self.object2_condition,
                    self.action,
                    self.object1_update,
                        self.object2_update))
