class Request(object):
    def __init__(self, object1_id, object2_id, action, object1_type, object2_type):
        self.object1_id         = object1_id
        self.object2_id         = object2_id
        self.action             = action
        self.object1_type       = object1_type
        self.object2_type       = object2_type
        self.defReadAttr        = []
        self.mightReadAttr      = []
        self.cached_updates     = [{}, {}]
        self.mightWriteObj      = []
        self.client             = None
        self.timestamp          = None
        self.art_delay          = 0
        self.object2_delay      = 0
        self.read_only          = True
        self.uuid               = None
        self.swapped            = 0

    def __str__(self):
        return ("\nObject1 ID: {0} \
                \nObject2 ID: {1} \
                \nAction: {2} \
                \nObject1 Type: {3} \
                \nObject2 Type: {4} \
                \nClient: {5} \
                \nTimeStamp: {6} \
                \nUUID: {7}     \
                \n"
                .format(
                    self.object1_id,
                    self.object2_id,
                    self.action,
                    self.object1_type,
                    self.object2_type,
                    #self.defReadAttr,
                    #self.mightReadAttr,
                    #self.cached_updates[0],
                    #self.cached_updates[1],
                    self.client,
                    self.timestamp,
                    self.uuid))

class Response(object):
    def __init__(self, request, result):
        self.request            = request
        self.result             = result

        self.object1_tent_attr_used = {}
        self.object2_tent_attr_used = {}

        self.object1_db_attr_used   = {}
        self.object2_db_attr_used   = {}

        self.object1_to_update      = {}
        self.object2_to_update      = {}

    def __str__(self):
        return (self.request.__str__() + \
                "object1 attribs used from Cache: {0} \
                \nobject2 attribs used from Cache: {1} \
                \nobject1 attribs used from DB: {2} \
                \nobject2 attribs used from DB: {3} \
                \nobject1 attribs to Update: {4} \
                \nobject2 attrubs to Update: {5} \
                \nResult: {6} \
                \n"
                .format(
                    self.object1_tent_attr_used,
                    self.object2_tent_attr_used,
                    self.object1_db_attr_used,
                    self.object2_db_attr_used,
                    self.object1_to_update,
                    self.object2_to_update,
                    self.result))

class DataBaseResponse(object):
    def __init__(self, request):
        self.request                = request
        self.database_attributes    = [{}, {}]
        self.result = False

    def __str__(self):
        return (self.request.__str__() + \
                "Object 1 DB Attributes: {0} \
                 \nObject 2 DB Attributes: {1} \
                 \nResult {2} \
                 \n"
                .format(
                    self.database_attributes[0],
                    self.database_attributes[1],
                    self.result))

class Rule(object):
    def __init__(self, object1_condition, object2_condition, action, object1_update, object2_update):
        self.object1_condition = object1_condition
        self.object2_condition = object2_condition
        self.action = action
        self.object1_update = object1_update
        self.object2_update = object2_update

    def __str__(self):
        return ("\nobject1 Condition: {0} \
                 \nobject2 Condition: {1} \
                 \nAction: {2} \
                 \nobject1 Update: {3} \
                 \nobject2 Update: {4} \
                 \n"
                .format(
                    self.object1_condition,
                    self.object2_condition,
                    self.action,
                    self.object1_update,
                        self.object2_update))
