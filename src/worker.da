import xml.etree.ElementTree as ET
from common import Request, Response, Rule
from time import sleep
import logging
import logging.handlers
import logging.config

import operator

class Worker(process):
    def setup(coordinators, database, config):
        
        self.logger = logging.getLogger('sLogger')
        self.exit = False
        self.coordinators = coordinators
        self.policy_map = {}
        self.database = database
        self.send_sequence = 1
        self.recv_sequence = 1
        policy_file = config.get("setup", "policy_def_file")

        read_policy(policy_file)
        
    
    def read_policy(policy_xml):
        tree = ET.parse(policy_xml)
        root = tree.getroot()
        for rule in root.iter('rule'):
            sc=rule.find('object1Condition').attrib
            rc=rule.find('object2Condition').attrib
            act=rule.find('action').attrib
            su=rule.find('object1Update')
            if su != None:
                su = su.attrib
            ru=rule.find('object2Update')
            if ru != None:
                ru = ru.attrib

            rule_object = Rule(sc, rc, act, su, ru)

            """
            Adding the Rule object to the action map.
            So each action will have a list of Rule objects
            that satisfy that action.
            """
            if act["name"] in self.policy_map.keys():
                self.policy_map[act["name"]].append(rule_object)
            else:
                self.policy_map[act["name"]] = [rule_object]

    def run():
        await(received(('EXIT',)))
        #logger.info("Exiting the Workers")

    def evaluate(value,
                object1_attribute_list_to_evaluate_policy,
                object2_attribute_list_to_evaluate_policy):
        dependency = value[1:].split('.')[0]
        attr_name = value[1:].split('.')[1]
        if dependency == "object1":
            return object1_attribute_list_to_evaluate_policy[attr_name]
        else:
            return object2_attribute_list_to_evaluate_policy[attr_name]

    def does_attribute_value_satisfy_condition(value_in_policy, value_from_db):
        if(len(value_in_policy) == 0 and len(value_from_db) == 0):
            return True
        if(len(value_in_policy) == 0 and len(value_from_db) != 0):
            return False
        if value_in_policy[0] == '>' or value_in_policy[0] == "<":
            ops = { ">": operator.gt, "<": operator.lt}
            integer_value_in_policy = int(value_in_policy[1:])
            try:
                integer_value_from_db = int(value_from_db)
                if ops[value_in_policy[0]](integer_value_from_db, integer_value_in_policy):
                    return True
                else:
                    return False
            except:
                return False
        if value_in_policy != value_from_db:
            return False
        else:
            return True

    def receive(msg=('FROM_COORD', request), from_ = p):
        
        logger.info("[Worker] Receiving request (UUID: {0}) from Coordinator {1}"
            .format(request.uuid, int(not request.swapped)))
        logger.debug("[Worker] Receiving request (seq. {0}) from Coordinator {1}: {2}"
            .format(recv_sequence, int(not request.swapped), request))

        recv_sequence += 1

        logger.info("[Worker] Sending request (UUID: {0}) to Database Emulator"
            .format(request.uuid))
        logger.debug("[Worker] Sending request (seq. {0}) to Database Emulator: {1}"
            .format(send_sequence, request))
        send_sequence += 1

        send(('FROM_WORKER', request), to = (database))

    def validate_attributes_in_policy(rule_map,
                            attributes_list_to_evaluate_policy,
                            object1_attribute_list_to_evaluate_policy,
                            object2_attribute_list_to_evaluate_policy):
        count = 0
        key_size = len(rule_map.keys())
        for key in rule_map.keys():
            if key in attributes_list_to_evaluate_policy:
                if rule_map[key] != None and len(rule_map[key]) > 0 and rule_map[key][0] == '$':
                    rule_map[key] = evaluate(rule_map[key],
                                    attributes_list_to_evaluate_policy,
                                    object1_attribute_list_to_evaluate_policy,
                                    object2_attribute_list_to_evaluate_policy)
                if does_attribute_value_satisfy_condition(rule_map[key], attributes_list_to_evaluate_policy[key]):
                    count+=1
                else:
                    break
            else:
                break
        if count != key_size:
            return False
        else:
            return True

    def update_attributes_after_policy_evaluation(update_condition,
                                attribute_list_to_evaluate_policy,
                                object1_attribute_list_to_evaluate_policy,
                                object2_attribute_list_to_evaluate_policy):
        to_update = {}
        if update_condition:
            for key, value in update_condition.items():
                if value == "++":
                    to_update[key] = str(int(attribute_list_to_evaluate_policy[key]) + 1)
                elif value == "--":
                    to_update[key] = str(int(attribute_list_to_evaluate_policy[key]) - 1)
                elif value != None and len(value) > 0 and value[0] == '$':
                    to_update[key] = evaluate(update_condition[key],
                                        object1_attribute_list_to_evaluate_policy,
                                        object2_attribute_list_to_evaluate_policy)

                else:
                    to_update[key] = update_condition[key]
        return to_update

    def receive(msg=('FROM_DATABASE', database_response), from_ = p):

        logger.info("[Worker] Receiving response (UUID: {0}) from Database Emulator"
            .format(database_response.request.uuid))
        logger.debug("[Worker] Receiving response (seq. {0}) from Database Emulator: {1}"
            .format(recv_sequence, database_response))
        
        recv_sequence += 1
        
        """
        Getting the list of rules which belong to this object
        from our policy map object
        """

        rules_list = {}
        try:
            rules_list = self.policy_map[database_response.request.action]
        except KeyError:
            response = Response(database_response.request, False)
            rid = database_response.request.subject_id % len(coordinators)
            logger.info("[Worker] No Rule Found for Action [{0}] while evaluating Request (UUID: {1})"
                .format(database_response.request.action, database_response.request.uuid))
            send(('FROM_WORKER',response), to = (coordinators[rid]))
            return

        response = Response(database_response.request, False)
        object1_atrribute_value_map = database_response.request.cached_updates[0].copy()
        object1_atrribute_value_map.update(database_response.database_attributes[0])

        object2_atrribute_value_map = database_response.request.cached_updates[1].copy()
        object2_atrribute_value_map.update(database_response.database_attributes[1])

        for rule in rules_list:
            result = validate_attributes_in_policy(rule.object1_condition,
                                object1_atrribute_value_map,
                                object1_atrribute_value_map,
                                object2_atrribute_value_map)
            if result == True:
                result = validate_attributes_in_policy(rule.object2_condition,
                                object2_atrribute_value_map,
                                object1_atrribute_value_map,
                                object2_atrribute_value_map)
                if result == True:
                    """
                    This rule has been satisfied
                    """
                    response.readAttr[0] = list(rule.object1_condition.keys())
                    response.readAttr[1] = list(rule.object2_condition.keys())
                    response.result = True
                    if rule.object1_update != None:
                        response.updated_object = database_response.request.object[0]
                        response.read_only_object = database_response.request.object[1]
                        response.updates = update_attributes_after_policy_evaluation(rule.object1_update,
                                        object1_atrribute_value_map,
                                        object1_atrribute_value_map,
                                        object2_atrribute_value_map)
                    elif rule.object2_update != None:
                        response.updated_object = database_response.request.object[1]
                        response.read_only_object = database_response.request.object[0]
                        response.updates = update_attributes_after_policy_evaluation(rule.object2_update,
                                        object2_atrribute_value_map,
                                        object1_atrribute_value_map,
                                        object2_atrribute_value_map)
        
        sleep(database_response.request.art_delay)

        ## TODO dummy to updated object. Correct it properly

        coordinator_id = 0

        if(response.updated_object == -1):
            send(('OUTCOME', response), to = (response.request.client))
            
            coordinator_id = response.request.object[0] % len(coordinators)    
            send(('FROM_WORKER_READATTR', response, 0), to = (coordinators[coordinator_id]))

            coordinator_id = response.request.object[1] % len(coordinators)    
            send(('FROM_WORKER_READATTR', response, 1), to = (coordinators[coordinator_id]))

        else:
            coordinator_id = response.updated_object % len(coordinators)
            send(('FROM_WORKER_RESPONSE', response), to = (coordinators[coordinator_id]))

        return