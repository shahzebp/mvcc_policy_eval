Testing scenarios

1) 	Simple Write: the coordinator coord(oW) for the object oW written by a
	read-write request r receives the result of r from the worker and immediately commits r

2)	Delayed Commit: Similar to above. Except that the commit of r is delayed,
	because some of the pendingMightRead sets for relevant attributes are non-empty when coord(oW) receives the result of r from the worker.

3)	Outer conflict check: the coordinator coord(oW) for the object oW written
	by a read-write request r receives the result of r from the worker, immediately detects a conflict, and re-starts r.

4)	Inner conflict check: the coordinator coord(oW) for the object oW written
	by a read-write request r receives the result of r from the worker, waits
	for relevant pendingMightReads to be resolved, and then detects a conflict
	and re-starts r.

5)	Wrong Prediction and delayed commit: similar to (2), except the client
	incorrectly predicts which object is written.

6)	Wrong Prediction and inner conflict check: similar to (4), except the
	client incorrectly predicts which object is written.

7)	Read Throttling: a read request is delayed in order to prevent starvation
	of writes, and later released and processed.

8)  Stress testing: Consecutive 200 write requests. All of them are successful
	and the database dump shows 200 versions appended in the end

Performance Evaluation:

We did the performance evaluation with the stress test itself described above. We did the
evaluation with respect to the write requests because doing it with just read request doesn't give
any information. Write request employs both read and write of attributes. We pump 200 requests
and find out the average time required to receive response of each request on the client side.
This is the RTT time for one request without any worker latency.

So for 1 write request, mvcc based implemenation requires 13555 micro seconds

This exact scenario when run under phase 2 implementation.
1 write request there requires 15204 micro seconds.

So the mvcc based implementation beats the phase 2 implemenation by ~2000 microseconds.
